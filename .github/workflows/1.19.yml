name: Scheduled Upstream (1.19)

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "*/20 * * * *"

env:
  wrapper: gradle/gradle
  shadow: johnrengelman/shadow
  paper: PaperMC/Paper
  paperweight: PaperMC/paperweight
  paperclip: PaperMC/Paperclip
  tiny: FabricMC/tiny-remapper
  puff: pufferfish-gg/Pufferfish
  purp: PurpurMC/Purpur
  pris: PrismarineTeam/Prismarine-Private # TODO
  token_owner: AlphaKR93

  ver: '1.19'
  papb: master
  pufb: ver/1.19
  purb: ver/1.19
  prib: dev/1.19

jobs:
  check:
    name: Check Upstreams
    if: "!startsWith(github.event.commits[0].message, '[CI-Skip]')"
    runs-on: ubuntu-20.04
    outputs:
      upstream: ${{ steps.check-paper.outputs.upstream }}
      wrapperrel: ${{ steps.check-wrapper.outputs.upstream }}
      wrappertag: ${{ steps.check-wrapper.outputs.upstreamTag }}
      shadowrel: ${{ steps.check-shadow.outputs.upstream }}
      papercliprel: ${{ steps.check-paperclip.outputs.upstream }}
      paperweightrel: ${{ steps.check-paperweight.outputs.upstream }}

      paper: ${{ steps.check-paper.outputs.paper }}
      pufferfish: ${{ steps.check-pufferfish.outputs.pufferfish }}
      purpur: ${{ steps.check-purpur.outputs.purpur }}
      wrapper: ${{ steps.check-wrapper.outputs.wrapper }}
      shadow: ${{ steps.check-shadow.outputs.shadow }}
      paperclip: ${{ steps.check-paperclip.outputs.paperclip }}
      paperweight: ${{ steps.check-paperweight.outputs.paperweight }}

      before: ${{ steps.check-paper.outputs.before }}
      beforepufferfish: ${{ steps.check-pufferfish.outputs.before }}
      beforepurpur: ${{ steps.check-purpur.outputs.before }}
      beforewrapper: ${{ steps.check-wrapper.outputs.before }}
      beforeshadow: ${{ steps.check-shadow.outputs.before }}
      beforepaperclip: ${{ steps.check-paperclip.outputs.before }}
      beforepaperweight: ${{ steps.check-paperweight.outputs.before }}
    steps:
      - name: Checkout action
        uses: actions/checkout@main

      - name: Clone Repository
        run: |
          git clone --recursive -b ${{ env.prib }} https://${{ env.token_owner }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ env.pris }}.git Prismarine

      - name: Check Gradle Wrapper version
        id: check-wrapper
        run: |
          upstreamTag=$(curl --silent https://api.github.com/repos/gradle/gradle/releases/latest | grep tag_name | cut -d "\"" -f 4 | cut -c 2-)
          current=$(cat Prismarine/gradle/wrapper/gradle-wrapper.properties | grep distributionUrl | cut -d "-" -f 2)
          if [[ $upstreamTag == *.0 ]]; then echo $upstreamTag > upstream && sed -i 's/.0//g' upstream && upstream=$(cat upstream) && rm upstream; fi
          if [ "$upstream" != "$current" ]; then wrapper=true; else wrapper=false; fi
          echo "::set-output name=wrapper::$wrapper"
          echo "::set-output name=upstream::$upstream"
          echo "::set-output name=upstreamTag::$upstreamTag"
          echo "::set-output name=before::$current"
          echo "Current Gradle Wrapper version: $current / Latest Gradle Wrapper version: $upstream"
          echo "Need upstream: $wrapper"

      - name: Check Gradle Shadow version
        id: check-shadow
        run: |
          upstream=$(git ls-remote https://github.com/${{ env.shadow }} | grep tags | tail -n 1 | cut -c 52-)
          current=$(cat Prismarine/build.gradle.kts | grep com.github.johnrengelman.shadow | cut -d "\"" -f 4)
          if [ "$upstream" != "$current" ]; then shadow=true; else shadow=false; fi
          echo "::set-output name=shadow::$shadow"
          echo "::set-output name=upstream::$upstream"
          echo "::set-output name=before::$current"
          echo "Current Gradle Shadow version: $current / Latest Gradle Shadow version: $upstream"
          echo "Need upstream: $shadow"
      
      - name: Check Paper commit
        id: check-paper
        run: |
          upstream=86f87ba40030d719e5fb8840ab18c513588de772 # $(git ls-remote https://github.com/${{ env.paper }} | grep heads/${{ env.papb }} | cut -f 1)
          current=$(cat Prismarine/gradle.properties | grep paperCommit | sed 's/paperCommit = //')
          if [ "$current" != "$upstream" ]; then paper=true; else paper=false; fi
          echo "::set-output name=paper::$paper"
          echo "::set-output name=before::$current"
          echo "::set-output name=upstream::$upstream"
          echo "Current Paper commit: $current / Latest Paper commit: $upstream"
          echo "Need upstream: $paper"

      - name: Check paperweight version
        id: check-paperweight
        run: |
          upstream=$(git ls-remote https://github.com/${{ env.paperweight }} | grep tags | grep -v {} | tail -n 1 | cut -c 53-)
          current=$(cat Prismarine/build.gradle.kts | grep io.papermc.paperweight.patcher | cut -d "\"" -f 4)
          if [ "$current" != "$upstream" ]; then paperweight=true; else paperweight=false; fi
          echo "::set-output name=paperweight::$paperweight"
          echo "::set-output name=before::$current"
          echo "::set-output name=upstream::$upstream"
          echo "Current paperweight version: $current / Latest paperweight version: $upstream"
          echo "Need upstream: $paperweight"

      - name: Check Paperclip version
        id: check-paperclip
        run: |
          upstream=$(git ls-remote https://github.com/${{ env.paperclip }} | grep tags | grep -v {} | tail -n 1 | cut -c 53-)
          current=$(cat cat Prismarine/build.gradle.kts | grep paperclip | cut -d "\"" -f 2 | cut -d ":" -f 3)
          if [ "$current" != "$upstream" ]; then paperclip=true; else paperclip=false; fi
          echo "::set-output name=paperclip::$paperclip"
          echo "::set-output name=before::$current"
          echo "::set-output name=upstream::$upstream"
          echo "Current Paperclip version: $current / Latest Paperclip version: $upstream"
          echo "Need upstream: $paperclip"

      - name: Check Pufferfish commit
        id: check-pufferfish
        run: |
          upstream=37f936f0b89395c6b59b08f4695525096c9a888b # $(git ls-remote https://github.com/${{ env.puff }} | grep ${{ env.pufb }} | cut -f 1)
          current=$(cat Prismarine/upstream-data | grep "pufferfish" | sed 's/pufferfish = //')
          if [ "$current" != "$upstream" ]; then pufferfish=true; else pufferfish=false; fi
          echo "::set-output name=pufferfish::$pufferfish"
          echo "::set-output name=before::$current"
          echo "Current Pufferfish commit: $current / Latest Pufferfish commit: $upstream"
          echo "Need upstream: $pufferfish"
      
      - name: Check Purpur commit
        id: check-purpur
        run: |
          upstream=$(git ls-remote https://github.com/${{ env.purp }} | grep ${{ env.purb }} | cut -f 1)
          current=$(cat Prismarine/upstream-data | grep "purpur" | sed 's/purpur = //')
          if [ "$current" != "$upstream" ]; then purpur=true; else purpur=false; fi
          echo "::set-output name=purpur::$purpur"
          echo "::set-output name=before::$current"
          echo "Current Purpur commit: $current / Latest Purpur commit: $upstream"
          echo "Need upstream: $purpur"

  upstream-dependencies:
    name: Upstream Dependencies & Gradle plugins
    runs-on: ubuntu-20.04
    needs: check
    if: needs.check.outputs.wrapper == 'true' || needs.check.outputs.shadow == 'true' || needs.check.outputs.paper == 'true' || needs.check.outputs.paperclip == 'true' || needs.check.outputs.paperweight == 'true' || needs.check.outputs.pufferfish == 'true' || needs.check.outputs.purpur == 'true'
    steps:
      - name: Checkout action
        if: needs.check.outputs.wrapper == 'true' || needs.check.outputs.shadow == 'true' || needs.check.outputs.paperclip == 'true' || needs.check.outputs.paperweight == 'true'
        uses: actions/checkout@main

      - name: Setup java
        if: needs.check.outputs.wrapper == true
        uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 17.0.3

      - name: Configure Git
        if: needs.check.outputs.wrapper == 'true' || needs.check.outputs.shadow == 'true' || needs.check.outputs.paperclip == 'true' || needs.check.outputs.paperweight == 'true'
        run: git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"
        
      - name: Clone Repository
        if: needs.check.outputs.wrapper == 'true' || needs.check.outputs.shadow == 'true' || needs.check.outputs.paperclip == 'true' || needs.check.outputs.paperweight == 'true'
        run: git clone --recursive -b ${{ env.prib }} https://${{ env.token_owner }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ env.pris }}.git Prismarine

      - name: Update Gradle Wrapper
        if: needs.check.outputs.wrapper == 'true'
        run: |
          cd Prismarine
          ./gradlew wrapper --gradle-version=${{ needs.check.outputs.wrapperrel }}

      - name: Update Gradle Shadow
        if: needs.check.outputs.shadow == 'true'
        run: |
          cd Prismarine
          sed -i 's/id("com.github.johnrengelman.shadow") version ".*"/id("com.github.johnrengelman.shadow") version "${{ needs.check.outputs.shadowrel }}"/' build.gradle.kts

      - name: Update Paperclip
        if: needs.check.outputs.paperclip == 'true'
        run: |
          cd Prismarine
          sed -i 's/paperclip("io.papermc:paperclip:.*")/paperclip("io.papermc:paperclip:${{ needs.check.outputs.papercliprel }}")/' build.gradle.kts

      - name: Update paperweight
        if: needs.check.outputs.paperweight == 'true'
        run: |
          cd Prismarine
          sed -i 's/id("io.papermc.paperweight.patcher") version ".*"/id("io.papermc.paperweight.patcher") version "${{ needs.check.outputs.paperweightrel }}"/' build.gradle.kts

      - name: Commit Changes
        if: needs.check.outputs.wrapper == 'true' || needs.check.outputs.shadow == 'true' || needs.check.outputs.paperclip == 'true' || needs.check.outputs.paperweight == 'true'
        run: |
          cd Prismarine
          git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"

          if [ "${{ needs.check.outputs.wrapper }}" == "true" ]; then
            upstream="Gradle Wrapper"
            commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.wrapper }}/compare/v${{ needs.check.outputs.beforewrapper }}...v${{ needs.check.outputs.wrappertag }} | jq -r '.commits[] | "${{ env.wrapper }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
            log="$log\n\nGradle Wrapper Changes:\n$commit"
          fi

          if [ "${{ needs.check.outputs.shadow }}" == "true" ]; then
            if [ "$upstream" != "" ]; then upstream="$upstream & Gradle Shadow"; else upstream="Gradle Shadow"; fi
            commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.shadow }}/compare/v${{ needs.check.outputs.beforeshadow }}...v${{ needs.check.outputs.shadowrel }} | jq -r '.commits[] | "${{ env.shadow }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
            log="$log\n\nGradle Shadow Changes:\n$commit"
          fi

          if [ "${{ needs.check.outputs.paperclip }}" == "true" ]; then
            if [ "$upstream" != "" ]; then upstream="$upstream & Paperclip"; else upstream="Paperclip"; fi
            commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.paperclip }}/compare/v${{ needs.check.outputs.beforepaperclip }}...v${{ needs.check.outputs.papercliprel }} | jq -r '.commits[] | "${{ env.paperclip }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
            log="$log\n\Paperclip Changes:\n$commit"
          fi

          if [ "${{ needs.check.outputs.paperweight }}" == "true" ]; then
            if [ "$upstream" != "" ]; then upstream="$upstream & Paperweight"; else upstream="Paperweight"; fi
            commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.paperweight }}/compare/v${{ needs.check.outputs.beforepaperweight }}...v${{ needs.check.outputs.paperweightrel }} | jq -r '.commits[] | "${{ env.paperweight }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
            log="$log\n\nPaperweight Changes:\n$commit"
          fi

          if [ "$upstream" != "" ]; then
            log="[CI-Skip] Update Dependencies ($upstream)\n\nUpstream has released updates that appear to apply and compile correctly$log"
            git add .
            printf "$log" | git commit -F -
          fi

      - name: Push changes
        if: needs.check.outputs.wrapper == 'true' || needs.check.outputs.shadow == 'true' || needs.check.outputs.paperclip == 'true' || needs.check.outputs.paperweight == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PUSH_TOKEN }}
          directory: ./Prismarine
          repository: ${{ env.pris }}
          branch: ${{ env.prib }}

  # upstream-paper:
  #   name: Upstream Paper
  #   runs-on: ubuntu-20.04
  #   needs: [check, upstream-dependencies]
  #   if: needs.check.outputs.paper == 'true' && !(needs.check.outputs.pufferfish == 'true') && !(needs.check.outputs.purpur == 'true')
  #   steps:
  #     - name: Checkout action
  #       uses: actions/checkout@main
  #
  #     - name: Setup java
  #       uses: actions/setup-java@main
  #       with:
  #         distribution: temurin
  #         java-version: 17.0.3
  #
  #     - name: Configure Git
  #       run: git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"
  #
  #     - name: Clone Repository
  #       run: git clone --recursive -b ${{ env.prib }} https://${{ env.token_owner }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ env.pris }}.git Prismarine
  #
  #     - name: Updated Upstream
  #       run: |
  #         cd Prismarine
  #         sed -i 's/paperCommit = .*/paperCommit = '"${{ needs.check.outputs.upstream }}"'/' gradle.properties
  #         ./gradlew applyPatches --stacktrace
  #
  #     - name: Rebuild Patches
  #       run: | 
  #         cd Prismarine
  #         ./gradlew rebuildPatches
  #
  #     - name: Commit Changes
  #       run: |
  #         cd Prismarine
  #         git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
  #
  #         commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.paper }}/compare/${{ needs.check.outputs.before }}...HEAD | jq -r '.commits[] | "${{ env.paper }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #
  #         log="Updated Upstream (Paper)\n\nUpstream has released updates that appear to apply and compile correctly\n\nPaper Changes:\n$commit"
  #         git add .
  #         printf "$log" | git commit -F -
  #
  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.PUSH_TOKEN }}
  #         directory: ./Prismarine
  #         repository: ${{ env.pris }}
  #         branch: ${{ env.prib }}
  #
  # upstream-pufferfish:
  #   name: Upstream Pufferfish
  #   runs-on: ubuntu-20.04
  #   needs: [check, upstream-dependencies]
  #   if: needs.check.outputs.pufferfish == 'true' && !(needs.check.outputs.purpur == 'true')
  #   steps:
  #     - name: Checkout action
  #       uses: actions/checkout@main
  #
  #     - name: Setup java
  #       uses: actions/setup-java@main
  #       with:
  #         distribution: temurin
  #         java-version: 17.0.3
  #
  #     - name: Configure Git
  #       run: |
  #         git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"
  #         upstream=${{ needs.check.outputs.upstream }} > $GITHUB_ENV
  #
  #     - name: Initial Sources
  #       run: |
  #         git clone --recursive -b ${{ env.prib }} https://${{ env.token_owner }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ env.pris }}.git Prismarine
  #         git clone --recursive -b ${{ env.pufb }} https://github.com/${{ env.puff }}.git
  #         cd Pufferfish/
  #         pufferfish=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "pufferfish=$pufferfish" > $GITHUB_ENV
  #         sed -i 's/paperRef=.*/paperRef='"${{ needs.check.outputs.upstream }}"'/' gradle.properties
  #         ./gradlew applyPatches --stacktrace
  #
  #     - name: MC Dev Sources
  #       run: |
  #         sed -i 's/pufferfish = .*/pufferfish = '"${{ env.pufferfish }}"'/' Prismarine/upstream-data
  #         cd Pufferfish/.gradle/caches/paperweight/upstreams/paper/Paper-Server
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         git add .
  #         git commit -m "Initial"
  #
  #     - name: Pufferfish Server Changes
  #       run: |
  #         cd Pufferfish/pufferfish-server/
  #         rm -rdf .git
  #         cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
  #         mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-Server/.git ./
  #         git add .
  #         printf "Pufferfish Server Changes\n\nOriginal by Kevin Raneri <kevin.raneri@gmail.com>\n\nCopyright (C) 2022 Pufferfish Studios LLC\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>." | git commit -F -
  #
  #     - name: Pufferfish API Changes
  #       run: |
  #         cd Pufferfish/pufferfish-api
  #         rm -rdf .git
  #         mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-API/.git ./
  #         git add .
  #         printf "Pufferfish API Changes\n\nOriginal by Kevin Raneri <kevin.raneri@gmail.com>\n\nCopyright (C) 2022 Pufferfish Studios LLC\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>." | git commit -F -
  #
  #     - name: Build Patches
  #       run: |
  #         cd Pufferfish/
  #         ./gradlew rebuildPatches
  #         cp -rf patches/api/*-Pufferfish-API-Changes.patch ../Prismarine/patches/api/0001-Pufferfish-API-Changes.patch
  #         cp -rf patches/server/*-Pufferfish-Server-Changes.patch ../Prismarine/patches/server/0001-Pufferfish-Server-Changes.patch
  #
  #     - name: Upload patches
  #       uses: actions/upload-artifact@main
  #       with:
  #         name: Patches
  #         path: Prismarine/patches
  #
  #     - name: Rebuild Patches
  #       run: |
  #         cd Prismarine/
  #         sed -i 's/paperCommit = .*/paperCommit = '"${{ needs.check.outputs.upstream }}"'/' gradle.properties
  #         ./gradlew applyPatches --stacktrace && ./gradlew rebuildPatches --stacktrace
  #
  #     - name: Commit changes
  #       run: |
  #         git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
  #
  #         if [ "${{ needs.check.outputs.paper }}" == "true" ]; then
  #           upstream="Paper"
  #           commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.paper }}/compare/${{ needs.check.outputs.before }}...HEAD | jq -r '.commits[] | "${{ env.paper }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #           log="$log\n\nPaper Changes:\n$commit"
  #         fi
  #
  #         if [ "$upstream" != "" ]; then upstream="$upstream & Pufferfish"; else upstream="Pufferfish"; fi
  #         commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.puff }}/compare/${{ needs.check.outputs.beforepufferfish }}...HEAD | jq -r '.commits[] | "${{ env.puff }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
  #         log="$log\n\nPufferfish Changes:\n$commit"
  #
  #         cd Prismarine/
  #         git add .
  #         log="Updated Upstream ($upstream)\n\nUpstream has released updates that appear to apply and compile correctly$log"
  #
  #         printf $log | git commit -F -
  #
  #     - name: Push changes
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.PUSH_TOKEN }}
  #         directory: ./Prismarine
  #         repository: ${{ env.pris }}
  #         branch: ${{ env.prib }}

  upstream-purpur:
    name: Upstream Purpur
    runs-on: ubuntu-20.04
    needs: [check, upstream-dependencies]
    if: needs.check.outputs.purpur == 'true'
    steps:
      - name: Checkout action
        uses: actions/checkout@main

      - name: Setup java
        uses: actions/setup-java@main
        with:
          distribution: temurin
          java-version: 17.0.3

      - name: Configure Git
        run: |
          git config --global user.email "alphakr93@outlook.com" && git config --global user.name "AlphaKR93"
          upstream=${{ needs.check.outputs.upstream }} > $GITHUB_ENV

      - name: Initial Sources
        run: |
          git clone --recursive -b ${{ env.pufb }} https://github.com/${{ env.puff }}.git
          git clone --recursive -b ${{ env.prib }} https://${{ env.token_owner }}:${{ secrets.PUSH_TOKEN }}@github.com/${{ env.pris }}.git Prismarine
          cd Pufferfish/
          git reset --hard 37f936f0b89395c6b59b08f4695525096c9a888b
          # pufferfish=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "pufferfish=$pufferfish" > $GITHUB_ENV
          # sed -i 's/paperRef=.*/paperRef='"${{ needs.check.outputs.upstream }}"'/' gradle.properties
          ./gradlew applyPatches --stacktrace

      - name: MC Dev Sources
        run: |
          # sed -i 's/pufferfish = .*/pufferfish = '"${{ env.pufferfish }}"'/' Prismarine/upstream-data
          cd Pufferfish/.gradle/caches/paperweight/upstreams/paper/Paper-Server
          cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
          git add .
          git commit -m "Initial"
      
      - name: Pufferfish Server Changes
        run: |
          cd Pufferfish/pufferfish-server/
          rm -rdf .git
          cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
          mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-Server/.git ./
          git add .
          printf "Pufferfish Server Changes\n\nOriginal by Kevin Raneri <kevin.raneri@gmail.com>\n\nCopyright (C) 2022 Pufferfish Studios LLC\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>." | git commit -F -

      - name: Pufferfish API Changes
        run: |
          cd Pufferfish/pufferfish-api
          rm -rdf .git
          mv -f ../.gradle/caches/paperweight/upstreams/paper/Paper-API/.git ./
          git add .
          printf "Pufferfish API Changes\n\nOriginal by Kevin Raneri <kevin.raneri@gmail.com>\n\nCopyright (C) 2022 Pufferfish Studios LLC\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>." | git commit -F -
          
      - name: Build Pufferfish Patches
        run: |
          cd Pufferfish/
          ./gradlew rebuildPatches

      - name: Initial Purpur Sources
        run: |
          git clone --recursive -b ${{ env.purb }} https://github.com/${{ env.purp }}.git
          cd Purpur/
          purpur=$(git log -1 --pretty=oneline | cut -c 1-40) && echo "purpur=$purpur" > $GITHUB_ENV
          # sed -i 's/paperCommit = .*/paperCommit = '"${{ needs.check.outputs.upstream }}"'/' gradle.properties
          cp -rf ../Pufferfish/patches/api/*-Pufferfish-API-Changes.patch patches/api/0001-Pufferfish-API-Changes.patch
          cp -rf ../Pufferfish/patches/server/*-Pufferfish-Server-Changes.patch patches/server/0001-Pufferfish-Server-Changes.patch
          ./gradlew applyPatches

      - name: Purpur Server Changes
        run: |
          sed -i 's/purpur = .*/purpur = '"${{ env.purpur }}"'/' Prismarine/upstream-data
          cd Purpur/Purpur-Server/
          rm -rdf .git
          cp -rf .gradle/caches/paperweight/mc-dev-sources/net/* src/main/java/net
          mv -f ../../Pufferfish/pufferfish-server/.git ./
          git add .
          printf "Purpur Server Changes\n\nOriginal by PurpurMC Team\n\nCopyright (C) 2022 PurpurMC LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE." | git commit -F -

      - name: Purpur API Changes
        run: |
          cd Purpur/Purpur-API/
          rm -rdf .git
          mv -f ../../Pufferfish/pufferfish-api/.git ./
          git add .
          printf "Purpur API Changes\n\nOriginal by PurpurMC Team\n\nCopyright (C) 2022 PurpurMC LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE." | git commit -F -

      - name: Build Patches
        run: |
          cd Purpur/
          ./gradlew rebuildPatches
          cp -rf patches/api/*-Pufferfish-API-Changes.patch ../Prismarine/patches/api/0001-Pufferfish-API-Changes.patch
          cp -rf patches/server/*-Pufferfish-Server-Changes.patch ../Prismarine/patches/server/0001-Pufferfish-Server-Changes.patch
          cp -rf patches/api/*-Purpur-API-Changes.patch ../Prismarine/patches/api/0002-Purpur-API-Changes.patch
          cp -rf patches/server/*-Purpur-Server-Changes.patch ../Prismarine/patches/server/0002-Purpur-Server-Changes.patch

      - name: Upload patches
        uses: actions/upload-artifact@main
        with:
          name: Patches
          path: Prismarine/patches

      - name: Rebuild Patches
        run: |
          cd Prismarine/
          # sed -i 's/paperCommit = .*/paperCommit = '"${{ needs.check.outputs.upstream }}"'/' gradle.properties
          ./gradlew applyPatches --stacktrace && ./gradlew rebuildPatches --stacktrace

      - name: Commit changes
        run: |
          git config --global user.email "actions@github.com" && git config --global user.name "Github Actions"
          
          # if [ "${{ needs.check.outputs.paper }}" == "true" ]; then
          #   upstream="Paper"
          #   commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.paper }}/compare/${{ needs.check.outputs.before }}...HEAD | jq -r '.commits[] | "${{ env.paper }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
          #   log="\n\nPaper Changes:\n$commit"
          # fi
          #
          # if [ "${{ needs.check.outputs.pufferfish }}" == "true" ]; then
          #   if [ "$upstream" != "" ]; then upstream="$upstream & Pufferfish"; else upstream="Pufferfish"; fi
          #   commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.puff }}/compare/${{ needs.check.outputs.beforepufferfish }}...${{ env.pufferfish }} | jq -r '.commits[] | "${{ env.puff }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
          #   log="$log\n\nPufferfish Changes:\n$commit"
          # fi
          #
          # if [ "$upstream" != "" ]; then upstream="$upstream & Purpur"; else upstream="Purpur"; fi
          upstream="Purpur"
          commit=$(curl --silent -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.purp }}/compare/${{ needs.check.outputs.beforepurpur }}...${{ env.purpur }} | jq -r '.commits[] | "${{ env.purp }}@\(.sha[:7]) \(.commit.message | split("\r\n")[0] | split("\n")[0])"')
          log="$log\n\nPurpur Changes:\n$commit"

          cd Prismarine/
          git add .
          log="Updated Upstream ($upstream)\n\nUpstream has released updates that appear to apply and compile correctly$log"
          
          printf $log | git commit -F -

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PUSH_TOKEN }}
          directory: ./Prismarine
          repository: ${{ env.pris }}
          branch: ${{ env.prib }}
