From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Alpha <alphakr93@outlook.com>
Date: Thu, 20 Jan 2022 15:37:39 +0900
Subject: [PATCH] Miscellaneous patches


diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishCommand.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishCommand.java
index 020368da69b9a492155f6de6297f74732f4ab6ea..0fa3512c9f908f82fa0db399741e6594226028ae 100644
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishCommand.java
+++ b/src/main/java/gg/pufferfish/pufferfish/PufferfishCommand.java
@@ -1,5 +1,6 @@
 package gg.pufferfish.pufferfish;
 
+import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
@@ -9,10 +10,12 @@ import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.md_5.bungee.api.ChatColor;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.purpurmc.purpur.PurpurConfig;
 
 public class PufferfishCommand extends Command {
 
@@ -22,7 +25,7 @@ public class PufferfishCommand extends Command {
         this.usageMessage = "/pufferfish [reload | version]";
         this.setPermission("bukkit.command.pufferfish");
     }
-    
+
     public static void init() {
         MinecraftServer.getServer().server.getCommandMap().register("pufferfish", "Pufferfish", new PufferfishCommand());
     }
@@ -31,8 +34,8 @@ public class PufferfishCommand extends Command {
     public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
         if (args.length == 1) {
             return Stream.of("reload", "version")
-              .filter(arg -> arg.startsWith(args[0].toLowerCase()))
-              .collect(Collectors.toList());
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
         }
         return Collections.emptyList();
     }
@@ -40,14 +43,16 @@ public class PufferfishCommand extends Command {
     @Override
     public boolean execute(CommandSender sender, String commandLabel, String[] args) {
         if (!testPermission(sender)) return true;
-        String prefix = ChatColor.of("#12fff6") + "" + ChatColor.BOLD + "Pufferfish Â» " + ChatColor.of("#e8f9f9");
 
         if (args.length != 1) {
-            sender.sendMessage(prefix + "Usage: " + usageMessage);
-            args = new String[]{"version"};
+            sender.sendMessage(org.bukkit.ChatColor.RED + "Usage: " + usageMessage);
+            return false;
         }
 
         if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, org.bukkit.ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, org.bukkit.ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
             MinecraftServer console = MinecraftServer.getServer();
             try {
                 PufferfishConfig.load();
@@ -58,9 +63,12 @@ public class PufferfishCommand extends Command {
             }
             console.server.reloadCount++;
 
-            Command.broadcastCommandMessage(sender, prefix + "Pufferfish configuration has been reloaded.");
+            Command.broadcastCommandMessage(sender, org.bukkit.ChatColor.GREEN + "Pufferfish config reload complete.");
         } else if (args[0].equalsIgnoreCase("version")) {
-            Command.broadcastCommandMessage(sender, prefix + "This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
         }
 
         return true;
diff --git a/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java b/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java
deleted file mode 100644
index adafc4fd661cf080b004b86c3eaed231a0133101..0000000000000000000000000000000000000000
--- a/src/main/java/gg/pufferfish/pufferfish/PufferfishVersionFetcher.java
+++ /dev/null
@@ -1,136 +0,0 @@
-package gg.pufferfish.pufferfish;
-
-import static net.kyori.adventure.text.Component.text;
-import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
-import static net.kyori.adventure.text.format.NamedTextColor.RED;
-
-import com.destroystokyo.paper.VersionHistoryManager;
-import com.destroystokyo.paper.util.VersionFetcher;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import java.io.IOException;
-import java.net.URI;
-import java.net.http.HttpClient;
-import java.net.http.HttpRequest;
-import java.net.http.HttpResponse;
-import java.nio.charset.StandardCharsets;
-import java.util.concurrent.TimeUnit;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.JoinConfiguration;
-import net.kyori.adventure.text.format.NamedTextColor;
-import net.kyori.adventure.text.format.TextDecoration;
-import org.bukkit.craftbukkit.CraftServer;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-public class PufferfishVersionFetcher implements VersionFetcher {
-	
-	private static final Logger LOGGER = Logger.getLogger("PufferfishVersionFetcher");
-	private static final HttpClient client = HttpClient.newHttpClient();
-	
-	private static final URI JENKINS_URI = URI.create("https://ci.pufferfish.host/job/Pufferfish-1.18/lastSuccessfulBuild/buildNumber");
-	private static final String GITHUB_FORMAT = "https://api.github.com/repos/pufferfish-gg/Pufferfish/compare/ver/1.18...%s";
-	
-	private static final HttpResponse.BodyHandler<JsonObject> JSON_OBJECT_BODY_HANDLER = responseInfo -> HttpResponse.BodySubscribers
-			.mapping(
-					HttpResponse.BodySubscribers.ofString(StandardCharsets.UTF_8),
-					string -> new Gson().fromJson(string, JsonObject.class)
-			);
-	
-	@Override
-	public long getCacheTime() {
-		return TimeUnit.MINUTES.toMillis(30);
-	}
-	
-	@Override
-	public @NotNull Component getVersionMessage(final @NotNull String serverVersion) {
-		final String[] parts = CraftServer.class.getPackage().getImplementationVersion().split("-");
-		@NotNull Component component;
-		
-		if (parts.length != 3) {
-			component = text("Unknown server version.", RED);
-		} else {
-			final String versionString = parts[2];
-			
-			try {
-				component = this.fetchJenkinsVersion(Integer.parseInt(versionString));
-			} catch (NumberFormatException e) {
-				component = this.fetchGithubVersion(versionString.substring(1, versionString.length() - 1));
-			}
-		}
-		
-		final @Nullable Component history = this.getHistory();
-		return history != null ? Component
-				.join(JoinConfiguration.noSeparators(), component, Component.newline(), this.getHistory()) : component;
-	}
-	
-	private @NotNull Component fetchJenkinsVersion(final int versionNumber) {
-		final HttpRequest request = HttpRequest.newBuilder(JENKINS_URI).build();
-		try {
-			final HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
-			if (response.statusCode() != 200) {
-				return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-			}
-			
-			int latestVersionNumber;
-			try {
-				latestVersionNumber = Integer.parseInt(response.body());
-			} catch (NumberFormatException e) {
-				LOGGER.log(Level.WARNING, "Received invalid response from Jenkins \"" + response.body() + "\".");
-				return text("Received invalid response from server.", RED);
-			}
-			
-			final int versionDiff = latestVersionNumber - versionNumber;
-			return this.getResponseMessage(versionDiff);
-		} catch (IOException | InterruptedException e) {
-			LOGGER.log(Level.WARNING, "Failed to look up version from Jenkins", e);
-			return text("Failed to retrieve version from server.", RED);
-		}
-	}
-	
-	// Based off code contributed by Techcable <Techcable@outlook.com> in Paper/GH-65
-	private @NotNull Component fetchGithubVersion(final @NotNull String hash) {
-		final URI uri = URI.create(String.format(GITHUB_FORMAT, hash));
-		final HttpRequest request = HttpRequest.newBuilder(uri).build();
-		try {
-			final HttpResponse<JsonObject> response = client.send(request, JSON_OBJECT_BODY_HANDLER);
-			if (response.statusCode() != 200) {
-				return text("Received invalid status code (" + response.statusCode() + ") from server.", RED);
-			}
-			
-			final JsonObject obj = response.body();
-			final int versionDiff = obj.get("behind_by").getAsInt();
-			
-			return this.getResponseMessage(versionDiff);
-		} catch (IOException | InterruptedException e) {
-			LOGGER.log(Level.WARNING, "Failed to look up version from GitHub", e);
-			return text("Failed to retrieve version from server.", RED);
-		}
-	}
-	
-	private @NotNull Component getResponseMessage(final int versionDiff) {
-		return switch (Math.max(-1, Math.min(1, versionDiff))) {
-			case -1 -> text("You are running an unsupported version of Pufferfish.", RED);
-			case 0 -> text("You are on the latest version!", GREEN);
-			default -> text("You are running " + versionDiff + " version" + (versionDiff == 1 ? "" : "s") + " beyond. " +
-							"Please update your server when possible to maintain stability, security, and receive the latest optimizations.",
-					RED);
-		};
-	}
-	
-	private @Nullable Component getHistory() {
-		final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
-		if (data == null) {
-			return null;
-		}
-		
-		final String oldVersion = data.getOldVersion();
-		if (oldVersion == null) {
-			return null;
-		}
-		
-		return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
-	}
-}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index bace0733a4c9984b02c9a2ac918d65299efd9869..636ff4a442ef454b2b780d9c3df7b1fcb19e1b55 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -210,7 +210,11 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         // Spigot start
         this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage));
-        org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+        try {
+            org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+        }
         org.spigotmc.SpigotConfig.registerCommands();
         // Spigot end
         // Paper start - moved up to right after PlayerList creation but before file load/save
