From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sat, 14 May 2022 17:29:53 +0900
Subject: [PATCH] EmpireCraft Tweaks

Original by EmpireCraft

Copyright (C) EmpireCraft

[REFERENCE PATCHES]
0013 - Allow force spawns
0031 - Mark Withers as Persistent
0038 - Remove "Copy of" from Written Books
0039 - Disable Repair Cost
0053 - Allow damage to shields for all damage
0054 - Don't use force unload for keep spawn setting change
0055 - Don't trigger Lootable Refresh for non player interaction
0056 - Do not return item to player on cancel drop item event
0062 - Don't use snapshots for TileEntity::getOwner
0066 - Allow negative Amplifier values
0071 - Default don't use blockstate snapshots
0080 - Use lenient json to component to resolve old WE schematic issue
0083 - dont load chunks for physics
0085 - Do not require nether fortress structure for mob spawning
0086 - bound villager trade maxUses by 16
0088 - Limit worlds structures can generate
0099 - Do not process chat/commands before player has joined

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
Software), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
index e8e49e1bdf1ff4ea60a4feb6ec52d999cbced256..65e9d8789b946ffc8e41d61200463ab194d9ad0a 100644
--- a/src/main/java/net/minecraft/server/MCUtil.java
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -550,7 +550,13 @@ public final class MCUtil {
         }
         String string = compound.getString(key);
         try {
-            return Component.Serializer.fromJson(string);
+            // Prismarine start - EMC tweaks
+            if (net.prismarineteam.prismarine.PrismarineConfig.useLenientJson) {
+                return Component.Serializer.fromJsonLenient(string);
+            } else {
+                return Component.Serializer.fromJson(string);
+            }
+            // Prismarine end
         } catch (com.google.gson.JsonParseException e) {
             org.bukkit.Bukkit.getLogger().warning("Unable to parse " + key + " from " + compound +": " + e.getMessage());
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 72df9c6d1ac2fef090b0532da079c607f79bce89..8278fe18a774ac2a0fac49bf21082aa8a83357da 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1431,7 +1431,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
         // SPIGOT-6415: Don't call spawn event for entities which travel trough worlds,
         // since it is only an implementation detail, that a new entity is created when
         // they are traveling between worlds.
-        this.addDuringTeleport(entity, null);
+        // Prismarine start - EMC tweaks
+        if (this.getMinecraftWorld().prismarineConfig.allowForceSpawns) {
+            this.addDuringTeleport(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FORCE);
+        } else {
+            this.addDuringTeleport(entity, null);
+        }
+        // Prismarine end
     }
 
     public void addDuringTeleport(Entity entity, CreatureSpawnEvent.SpawnReason reason) {
@@ -1890,6 +1896,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
     public @Nullable BlockPos findNearestMapFeature(HolderSet<ConfiguredStructureFeature<?, ?>> holderSet, BlockPos pos, int radius, boolean skipExistingChunks) {
         {
+            if (!prismarineConfig.generateStructures) return null; // Prismarine - EMC tweaks
             {
                 Pair<BlockPos, Holder<ConfiguredStructureFeature<?, ?>>> pair = this.getChunkSource().getGenerator().findNearestMapFeature(this, holderSet, pos, radius, skipExistingChunks);
                 // Paper end
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index bbdfd821221bf776aa9305d2e313940d70b2af6b..25695f2f9afc0c5ecc7de716c44a9a58b9066585 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2188,6 +2188,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     private void handleChat(TextFilter.FilteredText message) {
         if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) { // CraftBukkit - dead men tell no tales
             this.send(new ClientboundChatPacket((new TranslatableComponent("chat.disabled.options")).withStyle(ChatFormatting.RED), ChatType.SYSTEM, Util.NIL_UUID));
+        } else if (!player.didPlayerJoinEvent) { return; // EMC - do not handle chat messages before they joined // Prismarine - EMC tweaks
         } else {
             this.player.resetLastActionTime();
             String s = message.getRaw();
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index 390a70b9d9aa40a2511ab6588df2833a34682e5a..abde2c8de399d2e057d5cf255d0ce9ce3dcfa47c 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -307,7 +307,13 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
             mobEffectInstance = loadSpecifiedEffect(type, nbt.getCompound("HiddenEffect"));
         }
 
-        return new MobEffectInstance(type, j, i < 0 ? 0 : i, bl, bl2, bl3, key, mobEffectInstance); // Purpur - add key
+        // Prismarine start - EMC tweaks
+        if (net.prismarineteam.prismarine.PrismarineConfig.allowNegativeAmplifierValues) {
+            return new MobEffectInstance(type, j, i, bl, bl2, bl3, key, mobEffectInstance);
+        } else {
+            return new MobEffectInstance(type, j, i < 0 ? 0 : i, bl, bl2, bl3, key, mobEffectInstance); // Purpur - add key
+        }
+        // Prismarine end
     }
 
     public void setNoCounter(boolean permanent) {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 75f4749c35a4cc35bc8617b1ba5c74ef198a423c..1158164a5debe060904d30f486083280ba3a231d 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -747,6 +747,13 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
         return this.getHealth() <= this.getMaxHealth() / 2.0F;
     }
 
+    // Prismarine start - EMC tweaks
+    @Override
+    public boolean removeWhenFarAway(double distanceSquared) {
+        return this.level.prismarineConfig.witherCanDespawn;
+    }
+    // Prismarine end
+
     @Override
     public MobType getMobType() {
         return MobType.UNDEAD;
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 5b221b9026ed0a357669a0422bdff2524b5e372a..31005d800319e701d3358bd6200082ac7e5e8a53 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -801,6 +801,7 @@ public abstract class Player extends LivingEntity {
             this.level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
+                if (this.level.prismarineConfig.doNotReturnItemToPlayerOnDropCancelled) return null;
                 org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
                 if (flag1 && (cur == null || cur.getAmount() == 0)) {
                     // The complete stack was dropped
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 7471e59ad3362bc3d0bad6555fe29a9bb9ad74a6..cc6fff639bd1a6d574213f5a53e213ab253918fb 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -228,6 +228,7 @@ public final class ItemStack {
         this.count = count;
         if (this.item != null && this.item.canBeDepleted()) {
             this.setDamageValue(this.getDamageValue());
+            if (this.tag != null && this.tag.contains("RepairCost") && net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost) this.tag.remove("RepairCost"); // Prismarine - EMC tweaks
         }
 
         this.updateEmptyCacheFlag();
@@ -259,6 +260,7 @@ public final class ItemStack {
             // CraftBukkit end
             this.processEnchantOrder(this.tag); // Paper
             this.processText(); // Paper
+            if (item == Items.WRITTEN_BOOK && tag.contains("generation") && net.prismarineteam.prismarine.PrismarineConfig.blockWrittenBooksCopy) tag.remove("generation");
             this.getItem().verifyTagAfterLoad(this.tag);
         }
 
@@ -1188,10 +1190,12 @@ public final class ItemStack {
     }
 
     public int getBaseRepairCost() {
+        if (net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost) return 0; // Prismarine - EMC tweaks
         return this.hasTag() && this.tag.contains("RepairCost", 3) ? this.tag.getInt("RepairCost") : 0;
     }
 
     public void setRepairCost(int repairCost) {
+        if (net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost) return; // Prismarine - EMC tweaks
         // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
         if (repairCost == 0) {
             this.removeTagKey("RepairCost");
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 9a402505375af2051673245ec0a1daf9f3a66dc7..68f043207b7a3f239f5cd1147350239e9bd87669 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -53,7 +53,7 @@ public class MerchantOffer {
         this.result = ItemStack.of(nbt.getCompound("sell"));
         this.uses = nbt.getInt("uses");
         if (nbt.contains("maxUses", 99)) {
-            this.maxUses = nbt.getInt("maxUses");
+            this.maxUses = Math.min(net.prismarineteam.prismarine.PrismarineConfig.maxVillagerTradeLimit, nbt.getInt("maxUses"));
         } else {
             this.maxUses = 4;
         }
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 1d72f0e63c5a64a82439d828a7182465fe7238ef..fefd4f11c0b3c31502425d2378915b826f355c46 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -816,7 +816,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     @Override
     public boolean destroyBlock(BlockPos pos, boolean drop, @Nullable Entity breakingEntity, int maxUpdateDepth) {
-        BlockState iblockdata = this.getBlockState(pos);
+        // Prismarine start - EMC tweaks
+        BlockState iblockdata;
+        if (this.prismarineConfig.doNotLoadChunksForPhysics) {
+            iblockdata = this.getBlockStateIfLoaded(pos);
+        } else {
+            iblockdata = this.getBlockState(pos);
+        }
+        // Prismarine end
 
         if (iblockdata.isAir()) {
             return false;
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 303ad9eab2e0a9b73597ca4ee9d70bea1979c5dd..c31ed963e80744d4dc86ceef3085bc6a05d94eef 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -406,6 +406,7 @@ public final class NaturalSpawner {
 
     public static boolean isInNetherFortressBounds(BlockPos pos, ServerLevel world, MobCategory spawnGroup, StructureFeatureManager structureAccessor) {
         if (spawnGroup == MobCategory.MONSTER && world.getBlockState(pos.below()).is(Blocks.NETHER_BRICKS)) {
+            if (world.getMinecraftWorld().prismarineConfig.doNotRequireNetherFortressForMobSpawning && world.getWorld().getEnvironment() == org.bukkit.World.Environment.NETHER) return true; // Prismarine - EMC tweaks
             ConfiguredStructureFeature<?, ?> structurefeature = (ConfiguredStructureFeature) structureAccessor.registryAccess().registryOrThrow(Registry.CONFIGURED_STRUCTURE_FEATURE_REGISTRY).get(BuiltinStructures.FORTRESS);
 
             return structurefeature == null ? false : structureAccessor.getStructureAt(pos, structurefeature).isValid();
diff --git a/src/main/java/net/minecraft/world/level/StructureFeatureManager.java b/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
index fa6eaf7041b6a8b17c64322307839dbd358ad3ab..d211dcda932e6a82f07c6bb9b2a664ff7a2aff29 100644
--- a/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
+++ b/src/main/java/net/minecraft/world/level/StructureFeatureManager.java
@@ -94,7 +94,7 @@ public class StructureFeatureManager {
     }
 
     public boolean shouldGenerateFeatures() {
-        return this.worldGenSettings.generateFeatures();
+        return this.worldGenSettings.generateFeatures() && this.level.getMinecraftWorld().prismarineConfig.generateStructures; // Prismarine - EMC tweaks
     }
 
     public StructureStart getStructureAt(BlockPos pos, ConfiguredStructureFeature<?, ?> configuredStructureFeature) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 0fa91bd87dfec9cf8311bcbd5125caf6e308e90e..83112f710bf4672c5a3caace3a7e63e50f0fc484 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -263,7 +263,13 @@ public abstract class BlockEntity {
     // CraftBukkit start - add method
     public InventoryHolder getOwner() {
         // Paper start
-        return getOwner(true);
+        // Prismarine start - EMC tweaks
+        if (this.level.prismarineConfig.doNotUseSnapshotsForTileEntityGetOwner) {
+            return getOwner(false);
+        } else {
+            return getOwner(true);
+        }
+        // Prismarine end
     }
     public InventoryHolder getOwner(boolean useSnapshot) {
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index da00f75ccc9f8c2e2174d4450479202a50844245..1553ff187b2489c2893d7483040705fc71b561f9 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -69,6 +69,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
     }
 
     public void unpackLootTable(@Nullable Player player) {
+        if (this.level.prismarineConfig.doNotTriggerLootableRefreshForNonPlayerInteraction && player == null) return; // Prismarine - EMC tweaks
         if (this.lootableData.shouldReplenish(player) && this.level.getServer() != null) { // Paper
             LootTable lootTable = this.level.getServer().getLootTables().get(this.lootTable);
             if (player instanceof ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index e837091037402e990f763903d851c2f70888ada7..6f2c3b30e7ce7ec91605bc6207069b348ea6e477 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -987,7 +987,15 @@ public abstract class BlockBehaviour {
                 Direction enumdirection = aenumdirection[l];
 
                 blockposition_mutableblockposition.setWithOffset(pos, enumdirection);
-                BlockState iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                // Prismarine start - EMC tweaks
+                BlockState iblockdata;
+                if (world.getMinecraftWorld().prismarineConfig.doNotLoadChunksForPhysics) {
+                    iblockdata = world.getBlockState(blockposition_mutableblockposition);
+                } else {
+                    iblockdata = world.getBlockStateIfLoaded(blockposition_mutableblockposition);
+                }
+                if (iblockdata == null) { continue; }
+                // Prismarine end
                 BlockState iblockdata1 = iblockdata.updateShape(enumdirection.getOpposite(), this.asState(), world, blockposition_mutableblockposition, pos);
 
                 Block.updateOrDestroy(iblockdata, iblockdata1, world, blockposition_mutableblockposition, flags, maxUpdateDepth);
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 954e141e5617d6d52e2f3008c25fe9e2fe2f0f9a..5c86c295ec1cc386159eff9f0868a8a6a289fbe5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -47,7 +47,7 @@ public class ChunkStatus {
     });
     public static final ChunkStatus STRUCTURE_STARTS = ChunkStatus.register("structure_starts", ChunkStatus.EMPTY, 0, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, executor, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess, flag) -> {
         if (!ichunkaccess.getStatus().isOrAfter(chunkstatus)) {
-            if (worldserver.serverLevelData.worldGenSettings().generateFeatures()) { // CraftBukkit
+            if (worldserver.serverLevelData.worldGenSettings().generateFeatures() && worldserver.prismarineConfig.generateStructures) { // CraftBukkit // Prismarine - EMC tweaks
                 chunkgenerator.createStructures(worldserver.registryAccess(), worldserver.structureFeatureManager(), ichunkaccess, definedstructuremanager, worldserver.getSeed());
             }
 
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
index 40e5718ed69146cbf1aef7819bda1b8822e2499d..357a998cfe0917386ec9623e345bc7902c40a9c5 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineConfig.java
@@ -50,8 +50,8 @@ public class PrismarineConfig {
         commands = new HashMap<>();
         commands.put("prismarine", new PrismarineCommand("prismarine"));
 
-        version = getInt("config-version", 1);
-        set("config-version", 1);
+        version = getInt("config-version", 2);
+        set("config-version", 2);
 
         readConfig(PrismarineConfig.class, null);
     }
@@ -115,6 +115,11 @@ public class PrismarineConfig {
         return config.getDouble(path, config.getDouble(path));
     }
 
+    private static float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return config.getFloat(path, config.getFloat(path));
+    }
+
     private static int getInt(String path, int def) {
         config.addDefault(path, def);
         return config.getInt(path, config.getInt(path));
@@ -145,4 +150,45 @@ public class PrismarineConfig {
         }
         return builder.build();
     }
+
+    public static boolean doNotProcessChatCommandsBeforePlayerHasJoined = true;
+    private static void doNotProcessChatCommandsBeforePlayerHasJoined() {
+        doNotProcessChatCommandsBeforePlayerHasJoined = getBoolean("settings.do-not-process-chat-commands-before-player-has-joined", doNotProcessChatCommandsBeforePlayerHasJoined);
+    }
+
+    public static boolean disableAnvilRepairCost = false;
+    private static void disableAnvilRepairCost() {
+        disableAnvilRepairCost = getBoolean("settings.disable-anvil-repair-cost", disableAnvilRepairCost);
+    }
+
+    public static boolean allowNegativeAmplifierValues = false;
+    private static void allowNegativeAmplifierValues() {
+        allowNegativeAmplifierValues = getBoolean("settings.allow-negative-amplifier-values", allowNegativeAmplifierValues);
+    }
+
+    public static boolean blockWrittenBooksCopy = false;
+    private static void blockWrittenBooksCopy() {
+        blockWrittenBooksCopy = getBoolean("settings.block-written-books-copy", blockWrittenBooksCopy);
+    }
+
+    public static boolean useLenientJson = false;
+    private static void useLenientJson() {
+        if (version < 2) {
+            set("settings.use-lenient-json", getBoolean("use-lenient-json", false));
+            set("use-lenient-json", null);
+        }
+        useLenientJson = getBoolean("use-lenient-json", useLenientJson);
+    }
+
+    public static float shieldDamageAmount = 3.0F;
+    private static void shieldDamageAmount() {
+        shieldDamageAmount = getFloat("settings.shield-damage-amount", shieldDamageAmount);
+    }
+
+    public static boolean enableMaxVillagerTradeLimit = false;
+    public static int maxVillagerTradeLimit = 16;
+    private static void maxVillagerTradeLimit() {
+        enableMaxVillagerTradeLimit = getBoolean("settings.max-villager-trade-limit.enabled", enableMaxVillagerTradeLimit);
+        maxVillagerTradeLimit = getInt("settings.max-villager-trade-limit.limit", maxVillagerTradeLimit);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
index 74020515e2ec917b7d921aa8501a71ff433a6abb..c6beb55dd7d66e7f7b40753106667a25de99efc6 100644
--- a/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
+++ b/src/main/java/net/prismarineteam/prismarine/PrismarineWorldConfig.java
@@ -75,4 +75,54 @@ public class PrismarineWorldConfig {
         final Map<String, Object> value = PrismarineConfig.getMap("world-settings." + worldName + "." + path, null);
         return value.isEmpty() ? fallback : value;
     }
+
+    public boolean generateStructures = true;
+    private void generateStructures() {
+        generateStructures = getBoolean("generate-structures", generateStructures);
+    }
+
+    public boolean doNotUseForceUnload = false;
+    private void doNotUseForceUnload() {
+        doNotUseForceUnload = getBoolean("do-not-use-force-unload", doNotUseForceUnload);
+    }
+
+    public boolean doNotTriggerLootableRefreshForNonPlayerInteraction = false;
+    private void doNotTriggerLootableRefreshForNonPlayerInteraction() {
+        doNotTriggerLootableRefreshForNonPlayerInteraction = getBoolean("do-not-trigger-lootable-refresh-for-non-player-interaction", doNotTriggerLootableRefreshForNonPlayerInteraction);
+    }
+
+    public boolean doNotReturnItemToPlayerOnDropCancelled = false;
+    private void doNotReturnItemToPlayerOnDropCancelled() {
+        doNotReturnItemToPlayerOnDropCancelled = getBoolean("do-not-return-item-to-player-on-drop-cancelled", doNotReturnItemToPlayerOnDropCancelled);
+    }
+
+    public boolean doNotUseSnapshotsForTileEntityGetOwner = false;
+    private void doNotUseSnapshotsForTileEntityGetOwner() {
+        doNotUseSnapshotsForTileEntityGetOwner = getBoolean("do-not-use-snapshots-for-tile-entity-get-owner", doNotUseSnapshotsForTileEntityGetOwner);
+    }
+
+    public boolean doNotUseBlockstateSnapshots = false;
+    private void doNotUseBlockstateSnapshots() {
+        doNotUseBlockstateSnapshots = getBoolean("do-not-use-blockstate-snapshots", doNotUseBlockstateSnapshots);
+    }
+
+    public boolean doNotLoadChunksForPhysics = false;
+    private void doNotLoadChunksForPhysics() {
+        doNotLoadChunksForPhysics = getBoolean("do-not-load-chunks-for-physics", doNotLoadChunksForPhysics);
+    }
+
+    public boolean doNotRequireNetherFortressForMobSpawning = false;
+    private void doNotRequireNetherFortressForMobSpawning() {
+        doNotRequireNetherFortressForMobSpawning = getBoolean("do-not-require-nether-fortress-for-mob-spawning", doNotRequireNetherFortressForMobSpawning);
+    }
+
+    public boolean allowForceSpawns = false;
+    private void allowForceSpawns() {
+        allowForceSpawns = false;
+    }
+
+    public boolean witherCanDespawn = true;
+    private void entitySettings() {
+        witherCanDespawn = getBoolean("wither.can-despawn", witherCanDespawn);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index d637bb8d52ee8e6ba8c7e48f1155e845841a5e97..afcfd65e9f84ae7da0364324fa022583b28865cc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -407,7 +407,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public boolean unloadChunk(int x, int z) {
-        return this.unloadChunk(x, z, true);
+        // Prismarine start - EMC tweaks
+        if (this.world.prismarineConfig.doNotUseForceUnload) {
+            return this.unloadChunkRequest(x, z);
+        } else {
+            return this.unloadChunk(x, z, true);
+        }
+        // Prismarine end
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index bfe9dc935c87e01fb435d8b46ce413b84ca74856..3accc7d7f1be03ba748678c568d767050ac4079a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -326,7 +326,13 @@ public class CraftBlock implements Block {
 
     @Override
     public BlockState getState() {
-        return CraftBlockStates.getBlockState(this);
+        // Prismarine start - EMC tweaks
+        if (this.world.getMinecraftWorld().prismarineConfig.doNotUseBlockstateSnapshots) {
+            return CraftBlockStates.getBlockState(this, false);
+        } else {
+            return CraftBlockStates.getBlockState(this);
+        }
+        // Prismarine end
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 361bd8edcc6e6d0fbac958e3ec91d74a622d630a..d63105ee77933e78e2b9b8ebaa2c1deca923267c 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -711,7 +711,7 @@ public class CraftEventFactory {
             event = CraftEventFactory.callEntitySpawnEvent(entity);
         }
 
-        if (event != null && (event.isCancelled() || entity.isRemoved())) {
+        if (spawnReason != SpawnReason.FORCE && event != null && (event.isCancelled() || entity.isRemoved())) { // EMC - add != force // Prismarine - EMC tweaks
             Entity vehicle = entity.getVehicle();
             if (vehicle != null) {
                 vehicle.discard();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 5607dc10dc1c9d2dbf4e3007890e5e89a175605e..2f5c6032384a7103577292a81c55cad257f7694b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -384,7 +384,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         this.enchantments = CraftMetaItem.buildEnchantments(tag, CraftMetaItem.ENCHANTMENTS);
         this.attributeModifiers = CraftMetaItem.buildModifiers(tag, CraftMetaItem.ATTRIBUTES);
 
-        if (tag.contains(REPAIR.NBT)) {
+        if (!net.prismarineteam.prismarine.PrismarineConfig.disableAnvilRepairCost && tag.contains(REPAIR.NBT)) { // Prismarine - EMC tweaks
             this.repairCost = tag.getInt(REPAIR.NBT);
         }
 
